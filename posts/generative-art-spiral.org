#+BEGIN_COMMENT
.. title: Generative Art Spiral
.. slug: generative-art-spiral
.. date: 2023-06-17 16:38:42 UTC-07:00
.. tags: p5.js,generative art
.. category: Generative Art
.. link: 
.. description: Drawing a spiral with p5.js.
.. type: text
.. status: 
.. updated: 
.. template: p5.tmpl
#+END_COMMENT

{{% p5div source="spiral.js" divid="spiral-0a168ba9" %}}

#+begin_export html
<div id="angle-slider-0a168ba9"></div>
<div id="angle-text-0a168ba9"></div>
<div id="radius-slider-0a168ba9"></div>
<div id="radius-text-0a168ba9"></div>
<div id="circle-slider-0a168ba9"></div>
<div id="circle-text-0a168ba9"></div>
#+end_export

#+begin_src js :tangle ../files/posts/generative-art-spiral/spiral.js :exports none
const SPIRAL_DIV = "spiral-0a168ba9";
const SPIRAL_ANGLE_SLIDER = "angle-slider-0a168ba9";
const SPIRAL_RADIUS_SLIDER = "radius-slider-0a168ba9";
const SPIRAL_CIRCLE_SLIDER = "circle-slider-0a168ba9";
const SPIRAL_ANGLE_TEXT = "#angle-text-0a168ba9";
const SPIRAL_RADIUS_TEXT = "#radius-text-0a168ba9";
const SPIRAL_CIRCLE_TEXT = "#circle-text-0a168ba9";

<<angle-slider-values>>

<<radius-slider-values>>

<<circle-slider-values>>

<<the-spiralizer>>

  <<spiralizer-constructor>>

  <<spiralizer-draw>>

  <<spiralyzer-reset>>

} // spiralizer


<<spiral-sketch>>

  <<spiral-sketch-setup>>

  <<spiral-sketch-draw>>

  <<spiral-sketch-double-clicked>>
} // spiral_sketch

new p5(spiral_sketch, SPIRAL_DIV);
#+end_src

* The Sliders
** Angle Slider

The values used to create the angle-increment slider.

#+begin_src js :noweb-ref angle-slider-values
const ANGLE_SLIDER = {
  min: 0,
  max: 90,
  default_value: 5,
  step_size: 0
}
#+end_src

** Radius Slider

The values used to create the radius increment slider.

#+begin_src js :noweb-ref radius-slider-values
const RADIUS_SLIDER = {
  min: 0,
  max: 100,
  default_value: 1,
  step_size: 0
}
#+end_src

** Circle Slider

The values used to create the circle diameter slider.

#+begin_src js :noweb-ref circle-slider-values
const CIRCLE_SLIDER = {
  min: 1,
  max: 100,
  default_value: 1,
  step_size: 0
}
#+end_src

* The Spiralizer

** Class Declaration

#+begin_src js :noweb-ref the-spiralizer
class Spiralizer {
  // geometry
  degrees_in_a_circle = 360;
  to_radians = (2 * Math.PI)/ this.degrees_in_a_circle;

  // the starting values for the circles
  radius = 1;
  angle = 0;

  // the center of our sketch (and the circles)
  center_x;
  center_y;
#+end_src

** The Constructor

#+begin_src js :noweb-ref spiralizer-constructor
constructor(p5, center_x, center_y, maximum_radius, angle_slider, radius_slider, circle_slider){
  this.p5 = p5;
  this.center_x = center_x;
  this.center_y = center_y;
  this.maximum_radius = maximum_radius;

  // the amount to move the points on the circle as they're drawn
  this.angle_increment = angle_slider;
  this.radius_increment = radius_slider;

  // the size of the circle to draw  the circles
  this.point_diameter = circle_slider;
} // constructor
#+end_src

** The Draw Method

#+begin_src js :noweb-ref spiralizer-draw
draw() {
  let radians, x, y;
  
  radians = this.angle * this.to_radians;
  x = this.center_x + this.radius * Math.cos(radians);
  y = this.center_y + this.radius * Math.sin(radians);
  this.p5.circle(x, y, this.point_diameter.value());


  this.radius += this.radius_increment.value();
  this.angle += this.angle_increment.value();

  if (this.radius >= this.maximum_radius) {
    this.radius = this.radius_increment.value();
  }
} // end draw
#+end_src

** Reset

#+begin_src js :noweb-ref spiralizer-reset
reset() {
  this.radius = this.radius_increment.value();
  this.angle = 0;
} // end reset
#+end_src
* The Spiral Sketch

** Function Declaration

#+begin_src js :noweb-ref spiral-sketch
function spiral_sketch(p5) {
  // the size of the canvas and the color of the circles
  const WIDTH = 500;
  const HEIGHT = WIDTH;
  const POINT_COLOR = "RoyalBlue";
  
  let spiralizer;
  let angle_slider, angle_text;
  let radius_slider, radius_text;
  let circle_slider, circle_text;
#+end_src

** Setup

#+begin_src js :noweb-ref spiral-sketch-setup
p5.setup = function(){
  p5.createCanvas(WIDTH, HEIGHT);
  p5.background("white");
  p5.stroke(POINT_COLOR);
  p5.fill(POINT_COLOR);

  angle_slider = p5.createSlider(
    ANGLE_SLIDER.min,
    ANGLE_SLIDER.max,
    ANGLE_SLIDER.default_value,
    ANGLE_SLIDER.step_size,
  );
  
  radius_slider = p5.createSlider(
    RADIUS_SLIDER.min,
    RADIUS_SLIDER.max,
    RADIUS_SLIDER.default_value,
    RADIUS_SLIDER.step_size,
  );

  circle_slider = p5.createSlider(
    CIRCLE_SLIDER.min,
    CIRCLE_SLIDER.max,
    CIRCLE_SLIDER.default_value,
    CIRCLE_SLIDER.step_size,
  );

  angle_slider.parent(SPIRAL_ANGLE_SLIDER);
  radius_slider.parent(SPIRAL_RADIUS_SLIDER);
  circle_slider.parent(SPIRAL_CIRCLE_SLIDER);

  angle_text = p5.select(SPIRAL_ANGLE_TEXT);
  radius_text = p5.select(SPIRAL_RADIUS_TEXT);
  circle_text = p5.select(SPIRAL_CIRCLE_TEXT);

  spiralizer = new Spiralizer(p5, WIDTH/2, HEIGHT/2, WIDTH/2,
                              angle_slider,
                              radius_slider, circle_slider);

} // end setup
#+end_src

** Draw

#+begin_src js :noweb-ref spiral-sketch-draw
p5.draw = function() {
  spiralizer.draw();
  p5.background(255, 5);
  angle_text.html(`Angle Increment: ${angle_slider.value().toFixed(3)}`);
  radius_text.html(`Radius Increment: ${radius_slider.value().toFixed(3)}`);
  circle_text.html(`Point Diameter: ${circle_slider.value().toFixed(3)}`);
}// end draw
#+end_src

** Double-Clicked

#+begin_src js :noweb-ref spiral-sketch-double-clicked
p5.doubleClicked = function() {
  p5.background("white");
} // end doubleClicked
#+end_src
