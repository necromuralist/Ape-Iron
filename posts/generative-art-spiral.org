#+BEGIN_COMMENT
.. title: Generative Art Spiral
.. slug: generative-art-spiral
.. date: 2023-06-17 16:38:42 UTC-07:00
.. tags: p5.js,generative art
.. category: Generative Art
.. link: 
.. description: Drawing a spiral with p5.js.
.. type: text
.. status: 
.. updated: 
.. template: p5.tmpl
#+END_COMMENT

{{% p5div source="spiral.js" divid="0a168ba9-spiral" %}}

#+begin_src js :tangle ../files/posts/generative-art-spiral/spiral.js :exports none
const SPIRAL_DIV = "0a168ba9-spiral";

<<the-spiralizer>>

  <<spiralizer-constructor>>

  <<spiralizer-draw>>

} // spiralizer


<<spiral-sketch>>

  <<spiral-sketch-setup>>

  <<spiral-sketch-draw>>
} // spiral_sketch

new p5(spiral_sketch, SPIRAL_DIV);
#+end_src

* The Spiralizer

** Class Declaration

#+begin_src js :noweb-ref the-spiralizer
class Spiralizer {
  // geometry
  degrees_in_a_circle = 360;
  to_radians = (2 * Math.PI)/ this.degrees_in_a_circle;

  // the starting values for the circles
  radius = 1;
  radius_increment = 1;
  angle = 0;
  angle_increment = 5;

  // the center of our sketch (and the circles)
  center_x;
  center_y;

  // the size of the circle to draw  the circles
  point_diameter = 1;
#+end_src

** The Constructor

#+begin_src js :noweb-ref spiralizer-constructor
constructor(p5, center_x, center_y, maximum_radius){
  this.p5 = p5;
  this.center_x = center_x;
  this.center_y = center_y;
  this.maximum_radius = maximum_radius;
} // constructor
#+end_src

** The Draw Method

#+begin_src js :noweb-ref spiralizer-draw
draw() {
  let radians, x, y;
  
  radians = this.angle * this.to_radians;
  x = this.center_x + this.radius * Math.cos(radians);
  y = this.center_y + this.radius * Math.sin(radians);
  this.p5.circle(x, y, this.point_diameter);

  this.radius += this.radius_increment;
  this.angle += this.angle_increment;

  if (this.radius >= this.maximum_radius) {
    this.radius = 1;
  }
} // end draw
#+end_src


* The Spiral Sketch

** Function Declaration

#+begin_src js :noweb-ref spiral-sketch
function spiral_sketch(p5) {
  // the size of the canvas and the color of the circles
  const WIDTH = 500;
  const HEIGHT = WIDTH;
  const POINT_COLOR = "RoyalBlue";

  const spiralizer = new Spiralizer(p5, WIDTH/2, HEIGHT/2, WIDTH/2);
#+end_src

** Setup

#+begin_src js :noweb-ref spiral-sketch-setup
p5.setup = function(){
  p5.createCanvas(WIDTH, HEIGHT);
  p5.background("white");
  p5.stroke(POINT_COLOR);
  p5.fill(POINT_COLOR);
} // end setup
#+end_src

** Draw

#+begin_src js :noweb-ref spiral-sketch-draw
p5.draw = function() {
  spiralizer.draw();
  p5.background(255, 5);
}// end draw
#+end_src
