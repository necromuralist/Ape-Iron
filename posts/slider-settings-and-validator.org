#+BEGIN_COMMENT
.. title: Slider Settings
.. slug: slider-settings-and-validator
.. date: 2023-10-02 12:48:10 UTC-07:00
.. tags: javascript, p5
.. category: Javascript
.. link: 
.. description: A Slider Settings Class and Valdator
.. type: text
.. status: 
.. updated: 

#+END_COMMENT
#+OPTIONS: ^:{}
#+TOC: headlines 2

#+begin_src js :tangle ../javascript/slider.js :exports none
<<slider-settings-class>>

export { SliderSettings }
#+end_src

* The Sliders Settings

#+begin_src plantuml :file ../files/posts/slider-settings-and-validator/slider_settings.png :exports none
!theme mars
class SliderSettings {
Number min
Number max
Number default_value
Number step_size
String label
Integer precision
String slider_div
String caption_div
Validator validator

check_rep()
}

SliderSettings o- Validator
#+end_src

#+RESULTS:
[[file:../files/posts/slider-settings-and-validator/slider_settings.png]]

[[img-url:slider_settings.png]]

The ~SliderSettings~ class holds the values for the {{% lancelot "Slidini" %}}the-great-slidini{{% /lancelot %}} class and optionally validates the values it's been given.

** The Scenario

#+begin_src gherkin :tangle ../tests/cucumber-tests/test-slider-settings-and-validator/features/slider_settings.feature :exports none
<<given-a-slider-settings>>

<<when-call-check-rep>>

<<it-checked-min>>

<<it-checked-max>>

<<it-checked-default>>

<<it-checked-step-size>>

<<it-check-label>>

<<it-checked-precision>>

<<it-checked-slider-div>>

<<it-checked-caption-div>>
#+end_src

Since there's only one method to call and it defers everything to the {{% lancelot "Validator" %}}a-validator-for-slidersettings{{% /lancelot %}} I'm going to have one Scenario to test, but to try and make it easier to read I'm going to break up the Then-And statements within it, but I'm not going to break up the ~check_rep~ method itself so I'm not going to show the implementation under each test it satisfies, but just show the class definition in entirety after all the tests.

#+begin_src gherkin :tangle ../tests/cucumber-tests/test-slider-settings-and-validator/steps/slider_settings_steps.js :exports none
<<slider-settings-test-imports>>

<<setup-slider-settings-indexes>>
  
<<setup-slider-settings-step>>

  <<setup-slider-settings-methods>>

  <<setup-slider-settings-arguments>>

  <<setup-slider-settings-object>>

<<call-check-rep>>

<<min-check-step>>

<<max-check-step>>

<<default-check-step>>

<<step-size-check-step>>

<<check-step-label>>

<<check-step-precision>>

<<check-step-slider-div>>

<<check-step-caption-div>>
#+end_src

** The Testing

First we need to import some javascript. Even though I'm faking all the methods I'm going to use on the ~Validator~ class I used the real definition because  I was hoping to figure out how to get ~sinon~ to copy all the methods automatically, but I didn't see anything indicating it can, so maybe next time I'll just make a fake object instead.

#+begin_src js :noweb-ref slider-settings-test-imports
import { expect } from "chai";
import { faker } from "@faker-js/faker";
import { Given, When, Then } from "@cucumber/cucumber";
import { fake, replace } from "sinon";
import { SliderSettings } from "../../../../javascript/slider.js";
import { Validator } from "../../../../javascript/validator.js";
#+end_src

Since the Validator's methods get called more than once I need to be able to know what (zero-based) index each call is - e.g. checking ~default_value~ is the third ~Validator.is_a_number~ call that the ~SliderSettings~ makes, so to retrieve the object to check that the call went as expected I need to get the ~sinon~ call object at index 2. I'm making the ~IS~ object below to hold the indices to get the calls for each property... it'll make more sense later.

#+begin_src js :noweb-ref setup-slider-settings-indexes
const IS = {
  NUMBER: { min: 0,
            max: 1,
            default_value : 2,
            step_size: 3,               
          },
  SET: {
    label: 0
  },
  INTEGER: {
    precision: 0
  },
  ELEMENT: {
    slider_div: 0,
    caption_div: 1
  }
}

const METHODS = ["is_a_number", "is_set", "is_an_integer", "is_an_element_id"];
#+end_src

The ~METHODS~ array holds the names of all of the Validator's methods that ~check_rep~ uses so that I can replace the Validator's methods in a loop instead of doing it separately for each one.

*** Setup The Slider Settings

Now I'll build the ~SliderSettings~ with the faked ~Validator~ methods in the cucumber ~Given~ function. 

#+begin_src gherkin :noweb-ref given-a-slider-settings
Feature: Slider Settings

Scenario: check_rep is called.

Given a Slider Settings
#+end_src

Since all the methods are going to be faked, I don't need a mock ~document~ the way I did for the ~Validator~ tests.

#+begin_src js :noweb-ref setup-slider-settings-step
Given("a Slider Settings", function() {
  this.validator = new Validator({});
#+end_src

Now that I have a ~Validator~ instance, I can replace all the methods to test with ~fakes~.

#+begin_src js :noweb-ref setup-slider-settings-methods
for (const method of METHODS) {
    replace(this.validator, method,
          fake.returns(null));    
}
#+end_src

Next, I'll fake the arguments passed to the ~SliderSettings~ object and store them in the ~World~ ~this~ so that I can check that they were passed to the validator as expected in the tests.

#+begin_src js :noweb-ref setup-slider-settings-arguments
this.min = faker.number.float();
this.max = faker.number.float();
this.default_value = faker.number.float();
this.step_size = faker.number.float();
this.label = faker.lorem.words();
this.precision = faker.number.int();
this.slider_div = faker.lorem.word();
this.caption_div = faker.lorem.word();  
#+end_src

Finally, I can create the ~SliderSettings~ to test.

#+begin_src js :noweb-ref setup-slider-settings-object
this.settings = new SliderSettings(this.min,
                                   this.max,
                                   this.default_value,
                                   this.step_size,
                                   this.label,
                                   this.precision,
                                   this.slider_div,
                                   this.caption_div,
                                   this.validator);
});
#+end_src

*** Calling Check Rep

This is the only call to ~SliderSettings~ I make.

#+begin_src gherkin :noweb-ref when-call-check-rep
When check_rep is called
#+end_src

#+begin_src js :noweb-ref call-check-rep
When("check_rep is called", function() {
  this.settings.check_rep();
});
#+end_src

Now the rest of the tests check all the calls to the ~Validator~ that the ~check_rep~ method made.

*** Min Check

The first property that ~check_rep~ validates is the ~min~.

#+begin_src gherkin :noweb-ref it-checked-min
Then it checked the min
#+end_src

#+begin_src js :noweb-ref min-check-step
// Given a Slider Settings
// When check_rep is called

Then("it checked the min", function() {
  expect(this.validator.is_a_number.getCall(IS.NUMBER.min).calledWith(
    "min", this.min
  )).to.be.true;  
});
#+end_src

~this.validator.is_a_number~ is a faked method which allows us to check the arguments passed to it by getting the call object using ~getCall~ and checking the arguments with ~calledWith~. In this case checking ~min~ is the first call to ~is_a_number~ so I'm passing ~0~ to ~getCall~, retrieving it from the ~IS~ object I created earlier (using ~IS.NUMBER.min~).

I'm not crazy about the need to pass in strings, but since they always match the variable name I guess it's easy enough to see any typos.

The rest of the checks are pretty much the same thing but with different variables so I'll stop the commentary for a while.

*** Max Check

#+begin_src gherkin :noweb-ref it-checked-max
And it checked the max
#+end_src

#+begin_src js :noweb-ref max-check-step
Then("it checked the max", function() {
  expect(this.validator.is_a_number.getCall(IS.NUMBER.max).calledWith(
    "max", this.max
  )).to.be.true;
});
#+end_src

*** Default Value

#+begin_src gherkin :noweb-ref it-checked-default
And it checked the default_value
#+end_src

#+begin_src js :noweb-ref default-check-step
Then("it checked the default_value", function() {
  expect(this.validator.is_a_number.getCall(IS.NUMBER.default_value).calledWith(
    "default_value", this.default_value
  )).to.be.true;
});
#+end_src
*** Step Size

#+begin_src gherkin :noweb-ref it-checked-step-size
And it checked the step_size
#+end_src

#+begin_src js :noweb-ref step-size-check-step
Then("it checked the step_size", function() {
  expect(this.validator.is_a_number.getCall(IS.NUMBER.step_size).calledWith(
    "step_size", this.step_size
  )).to.be.true;
});
#+end_src
*** Label

#+begin_src gherkin :noweb-ref it-check-label
And it checked the label
#+end_src

#+begin_src js :noweb-ref check-step-label
Then("it checked the label", function() {
  expect(this.validator.is_set.getCall(IS.SET.label).calledWith(
    "label", this.label
  )).to.be.true;
});
#+end_src

*** Precision

#+begin_src gherkin :noweb-ref it-checked-precision
And it checked the precision
#+end_src

#+begin_src js :noweb-ref check-step-precision
Then("it checked the precision", function() {
  expect(this.validator.is_an_integer.getCall(IS.INTEGER.precision).calledWith(
    "precision", this.precision
  )).to.be.true;
});
#+end_src

*** Slider Div

#+begin_src gherkin :noweb-ref it-checked-slider-div
And it checked the slider_div
#+end_src

#+begin_src js :noweb-ref check-step-slider-div
Then("it checked the slider_div", function() {
  expect(this.validator.is_an_element_id.getCall(IS.ELEMENT.slider_div).calledWith(
    "slider_div", this.slider_div
  )).to.be.true;
});
#+end_src

*** Caption Div

#+begin_src gherkin :noweb-ref it-checked-caption-div
And it checked the caption_div.
#+end_src

#+begin_src js :noweb-ref check-step-caption-div
Then("it checked the caption_div.", function() {
  expect(this.validator.is_an_element_id.getCall(IS.ELEMENT.caption_div).calledWith(
    "caption_div", this.caption_div
  )).to.be.true;
});
#+end_src

** The Slider Settings Implementation

Now that we have the tests, I'll implement the slider settings.

[[img-url:slider_settings.png]]

The ~SliderSettings~ holds the settings to build {{% lancelot "Slidini" %}}the-great-slidini{{% /lancelot %}}, the Slider and Caption holder. It really could be done with a plain object (which is what it was) but I decided to add a validator to make sure that I was getting all the parameters right.

#+begin_src js :noweb-ref slider-settings-class
class SliderSettings {
  constructor(min, max, default_value, step_size,
              label, precision,
              slider_div, caption_div,
              validator, document) {
    this.min = min;
    this.max = max;
    this.default_value = default_value;
    this.step_size = step_size;
    this.label = label;
    this.precision = precision;
    this.slider_div = slider_div;
    this.caption_div = caption_div;
    this.confirm = validator;
    this.document = document;
  }; // constructor

  check_rep(){
    this.confirm.is_a_number("min", this.min);
    this.confirm.is_a_number("max", this.max);
    this.confirm.is_a_number("default_value", this.default_value);
    this.confirm.is_a_number("step_size", this.step_size);
    this.confirm.is_set("label", this.label);
    this.confirm.is_an_integer("precision", this.precision);
    this.confirm.is_an_element_id("slider_div", this.slider_div);
    this.confirm.is_an_element_id("caption_div", this.caption_div);
  }; // check_rep
}; // SliderSettings
#+end_src


* Links
** Related Post
 - {{% doc %}}a-validator-for-slidersettings{{% /doc %}}
 - {{% doc %}}the-great-slidini{{% /doc %}}

