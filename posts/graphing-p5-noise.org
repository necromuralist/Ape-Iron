#+BEGIN_COMMENT
.. title: Graphing P5 Noise
.. slug: graphing-p5-noise
.. date: 2023-04-24 11:47:11 UTC-07:00
.. tags: p5.js,noise,graphing
.. category: P5.js
.. link: 
.. description: Graphing the P5 noise function.
.. type: text
.. status: 
.. updated: 
.. template: p5.tmpl
.. has_math: true
#+END_COMMENT
#+OPTIONS: ^:{}
#+TOC: headlines 3

#+begin_src js :tangle ../files/posts/graphing-p5-noise/noise_graph.js :exports none
<<noise-graph-id>>

<<noise-graph-function>>
  <<perlin-noise-space-variables>>

  // set up the slider to change the step-size
  <<slider-variables>>

  // define some colors
  <<colors-and-opacity>>

  // create the canvas and the slider
  <<p5-setup>>
    <<setup-canvas>>

    <<setup-slider>>
  } // setup

  // draw the noise graph
  <<p5js-draw>>
  <<setup-the-next-frame>>

  // begin one graph plot
  <<plot-this-frame-begin>>

  <<plot-this-frame-for-loop>>

    <<plot-this-frame-y>>
    <<plot-this-frame-vertex>>
    <<plot-this-frame-x-update>>
  }
  <<plot-this-frame-end-shape>>
  // end one graph plot

  // move the input to the noise function over one step
  <<move-the-noise-input>>
  } // end draw
} // end noise_graph

<<create-the-noise-graph>>
#+end_src

#+begin_export html
  <script language="javascript" type="text/javascript" src='noise_graph.js'></script>

  <div id="noise-graph"></div>
#+end_export

The slider controls how big a step the graph takes along the ~noise~ space with each move to the right along the x-axis (moving the slider to the right makes the steps bigger so the line looks noisier).

* Setup The Sketch
This first section isn't really about plotting the graph but rather about setting up the P5 sketch in the HTML, but I refer to what's defined here within the sketch functions so I thought I should show it.
** Name The Parent DIV
I'm making a ~div~ to stick the sketch into the page so here's the ID I'll use for that ~div~ so the code can refer to it.

#+begin_src js :exports code :noweb-ref noise-graph-id
const NOISE_GRAPH_DIV = "noise-graph";
#+end_src
** The Instance Container Function
To keep all the variable for the sketch contained in its scope I'm going to use a function (~noise_graph~) to act as a closure.

#+begin_src js :exports code :noweb-ref noise-graph-function
function noise_graph(p5js){
#+end_src
* Constants and Variables
Now we're into the p5 sketch code. Before defining the ~setup~ and ~draw~ methods I'll define some variables that we can use within them.

** The Noise Space
The inputs to the ~noise~ function are what I'm calling the ~X_NOISE_COORDINATE~ (or variations on that name, anyway). Every time the canvas gets re-drawn I'll re-draw the graph by putting in a sequence of x-values starting at ~STARTING_X_NOISE_COORDINATE~ and incrementing it by the step-size until we get to the right of the canvas.

#+begin_src js :noweb-ref perlin-noise-space-variables :exports code
let STARTING_X_NOISE_COORDINATE = 0;
let X_NOISE_COORDINATE_STEP_SIZE = 0.01;
#+end_src
** The Slider
#+begin_src js :noweb-ref slider-variables :exports code
let slider;
let MINIMUM_NOISE_COORDINATE_STEP_SIZE = 0;
let MAXIMUM_NOISE_COORDINATE_STEP_SIZE = 0.25;
let DEFAULT_NOISE_COORDINATE_STEP_SIZE = 0.01;
let SLIDER_STEP_SIZE = 0;
#+end_src
** Colors

#+begin_src js :exports code :noweb-ref colors-and-opacity
let BLACK = 0;
let WHITE = 255;
let OPACITY = 20;
let LINE_COLOR = BLACK;
let BACKGROUND_COLOR = WHITE;
#+end_src
* Setup
#+begin_src js :exports code :noweb-ref p5-setup
p5js.setup = function() {
#+end_src
** Canvas and Line
#+begin_src js :exports code :noweb-ref setup-canvas
let canvas = p5js.createCanvas(
  document.getElementById(NOISE_GRAPH_DIV).offsetWidth, 400);
p5js.stroke(LINE_COLOR);
p5js.noFill();
#+end_src
** Slider
#+begin_src js :exports code :noweb-ref setup-slider
slider = p5js.createSlider(
  MINIMUM_NOISE_COORDINATE_STEP_SIZE,
  MAXIMUM_NOISE_COORDINATE_STEP_SIZE,
  DEFAULT_NOISE_COORDINATE_STEP_SIZE,
  SLIDER_STEP_SIZE);
slider.style("width", "100px");
#+end_src
* Draw
Here's where I define the ~draw~ function that gets called repeatedly to animate our sketch.
** The Draw Function
I monkey patch the ~draw~ method on the ~p5~ object.

#+begin_src js :exports code :noweb-ref p5js-draw
p5js.draw = function() {
#+end_src
** Setup The Next Frame
I'll paint the canvas with a semi-opaque white on every refresh so that you can sort of see how the graph changes with each loop. It didn't turn out to be as easy to see as I thought it would be but it looks kind of nice so I'm going to leave it. I create an ~x_noise_coordinate~ which will hold the input to the ~noise~ function as we move through the loop and get the ~noise_step_size~ value from the slider. The ~noise_step_size~ is the amount that I change ~x_noise-coordinate~ as we move from left to right along the x-axis of the graph.

#+begin_src js :exports code :noweb-ref setup-the-next-frame
p5js.background(BACKGROUND_COLOR, OPACITY);
let x_noise_coordinate = STARTING_X_NOISE_COORDINATE;
let noise_step_size = slider.value();
#+end_src
** Plot Next Frame
Here's where I plot the graph. We're going to draw the graph using connected line segments so before the loop starts I'll tell p5 to start the shape.

#+begin_src js :exports code :noweb-ref plot-this-frame-begin
p5js.beginShape();
#+end_src

To draw the graph we'll traverse the canvas from left to right with a for-loop. The ~x~ variable in the for-loop corresponds to the x-coordinate in the canvas where we're going to put the next point in our line.

#+begin_src js :exports code :noweb-ref plot-this-frame-for-loop
for (let x = 0; x < p5js.width; x++) {
#+end_src

Now we'll get the y-coordinate for the point. Since the ~noise~ function's output is a float from 0 to 1 we can use it to set the y-coordinate to a fraction of the canvas' height by multiplying $noise \times height$.

#+begin_src js :exports code :noweb-ref plot-this-frame-y
let y = p5js.noise(x_noise_coordinate) * p5js.height;
#+end_src

Now that we have the x and y coordinates we can draw the next segment by adding a vertex to the shape.

#+begin_src js :exports code :noweb-ref plot-this-frame-vertex
p5js.vertex(x, y);
#+end_src

We want to change our input to the noise function along with our x-coordinate position on the graph so we add a step to it.

#+begin_src js :exports code :noweb-ref plot-this-frame-x-update
x_noise_coordinate += noise_step_size;
#+end_src

That's the end of the for-loop. Now, outside of the loop we call ~endShape~ to stop drawing our graph (otherwise it'd draw a line back to the start of the graph the next time we went through the loop).
#+begin_src js :exports code :noweb-ref plot-this-frame-end-shape
p5js.endShape();
#+end_src
** Move the Noise Input
Now we'll move the input for the noise function at the start of the graph a little. If we didn't the input to the noise function as we went through the loop would always be the same so our plot would just draw the same thing over and over again (well, if we move the slider to change the ~noise_step_size~ it wouldn't be exactly the same, but the starting point would always be the same).
#+begin_src js :exports code :noweb-ref move-the-noise-input
STARTING_X_NOISE_COORDINATE += noise_step_size;
#+end_src
* Make The Sketch Object
Now we pass our sketch definition to ~p5~ to build it and attach it to our HTML div.
#+begin_src js :exports code :noweb-ref create-the-noise-graph
new p5(noise_graph, NOISE_GRAPH_DIV);
#+end_src
* Sources
P5 Reference:
- reference | noise() [Internet]. [cited 2023 Apr 25]. Available from: https://p5js.org/reference/#/p5/noise
- reference | beginShape() [Internet]. [cited 2023 Apr 25]. Available from: https://p5js.org/reference/#/p5/beginShape
- reference | vertex() [Internet]. [cited 2023 Apr 25]. Available from: https://p5js.org/reference/#/p5/vertex
- reference | createSlider() [Internet]. [cited 2023 Apr 25]. Available from: https://p5js.org/reference/#/p5/createSlider


Wikipedia on Perlin Noise:
 - Perlin noise. In: Wikipedia [Internet]. 2023 [cited 2023 Apr 24]. Available from: https://en.wikipedia.org/w/index.php?title=Perlin_noise&oldid=1148235423

The original javascript came from Daniel Shiffman's Coding Train:

 - I.4: Graphing 1D Perlin Noise [Internet]. [cited 2023 Apr 24]. Available from: https://thecodingtrain.com/tracks/the-nature-of-code-2/noc/perlin/graphing-1d-perlin-noise

 Bugs on the (now deprecated) github processing *Issues* page pointing out that ~noise~ isn't really /perlin/ noise:

 - Real Perlin noise would be nice · Issue #2549 · processing/processing · GitHub [Internet]. [cited 2023 Apr 24]. Available from: https://github.com/processing/processing/issues/2549
 -  Documentation for noise() · Issue #2550 · processing/processing [Internet]. GitHub. [cited 2023 Apr 24]. Available from: https://github.com/processing/processing/issues/2550
