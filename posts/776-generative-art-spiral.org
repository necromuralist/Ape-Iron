#+BEGIN_COMMENT
.. title: Generative Art: Spiral
.. slug: generative-art-spiral
.. date: 2023-06-17 16:38:42 UTC-07:00
.. tags: p5.js,generative art
.. category: Generative Art
.. link: 
.. description: Drawing a spiral with p5.js.
.. type: text
.. status: 
.. updated: 
.. template: p5.tmpl
#+END_COMMENT
#+OPTIONS: ^:{}
#+TOC: headlines 2

{{% p5module source="spiral.js" divid="spiral-0a168ba9" %}}


#+begin_export html
<div id="angle-text-0a168ba9"></div>
<div id="angle-slider-0a168ba9"></div>

<div id="radius-text-0a168ba9"></div>
<div id="radius-slider-0a168ba9"></div>

<div id="circle-text-0a168ba9"></div>
<div id="circle-slider-0a168ba9"></div>
#+end_export

#+begin_src js :tangle ../files/posts/generative-art-spiral/slider.js :exports none
<<slider-settings-class>>

export { SliderSettings }
#+end_src

#+begin_src js :tangle ../files/posts/generative-art-spiral/spiral.js :exports none
import { SliderSettings } from "./slider.js"

<<spiral-divs>>

<<sketch-div>>

<<slider-divs>>

<<text-divs>>
  
<<angle-slider-values>>

<<radius-slider-values>>

<<circle-slider-values>>

<<the-spiralizer>>

  <<spiralizer-constructor>>

  <<spiralizer-draw>>

  <<spiralizer-reset>>

} // spiralizer

<<slidini>>

  <<slidini-constructor>>

  <<slidini-get-slider>>

  <<slidini-get-caption>>

  <<slidini-update-caption>>
} // slidini

<<spiral-sketch>>

  <<spiral-sketch-setup>>

  <<spiral-sketch-setup-sliders>>

  <<spiral-sketch-setup-spiralizer>>

  <<spiral-sketch-draw>>

  <<spiral-sketch-double-clicked>>
} // spiral_sketch

<<p5-instance>>
#+end_src

* The Div IDs
To specify where the parts of the sketch go I added some ~div~ tags to the HTML so I'm going to create some javascript constants with the div IDs to make it easier to keep track of them.

** The Sketch Div

This is the ID for the ~div~ where the main sketch will go, it gets passed to the p5 constructor, along with the sketch definition, to create the [[*The P5 Instance][the P5 instance]].

#+begin_src js :noweb-ref sketch-div
const SPIRAL_DIV = "spiral-0a168ba9";
#+end_src

** The Slider Divs
I'm going to add some sliders to make it easier to adjust some of the parameters and see how that affects the sketch. These are the IDs of the ~div~ tags where I'm going to put the sliders to change some of the sketch values. The angle and radius sliders will set how much the angle and radius will change as the circle is drawn. If, for example, the angle slider is set to 5, then every point that's added will be rotated five degrees from the previous point, and if the radius is set to 5, then the radius will grow by 5 every time a point is added.

The circle slider is a little different in that it sets the diameter for the circles that I'm drawing to create the spiral, so it's just an aesthetic setting.

#+begin_src js :noweb-ref slider-divs
const SPIRAL_ANGLE_SLIDER = "angle-slider-0a168ba9";
const SPIRAL_RADIUS_SLIDER = "radius-slider-0a168ba9";
const SPIRAL_CIRCLE_SLIDER = "circle-slider-0a168ba9";
#+end_src

** Text Divs

I also created some ~div~ tags that I'll put some text into to show the current value of each of the sliders.

#+begin_src js :noweb-ref text-divs
const SPIRAL_ANGLE_TEXT = "#angle-text-0a168ba9";
const SPIRAL_RADIUS_TEXT = "#radius-text-0a168ba9";
const SPIRAL_CIRCLE_TEXT = "#circle-text-0a168ba9";
#+end_src

* The Validator

#+begin_src plantuml :file ../files/posts/generative-art-spiral/validator.png :exports none
!theme mars
class Validator {
constructor(document)
is_a_number(identifier, acutal)
is_set(identifier, actual)
is_integer(identifier, actual)
is_id(identifier, actual_id)
}
#+end_src

#+RESULTS:
[[file:../files/posts/generative-art-spiral/validator.png]]

[[img-url: validator.png][Validator UML]]

#+begin_src gherkin :tangle ../tests/cucumber-tests/test-generative-art-spiral/features/validator.feature :exports none
Feature: Validator

# is_a_number
Scenario: The expected number is a number.

Given a Validator
When a number is checked
Then nothing happens.

Scenario: The expected number isn't a number.

Given a Validator
When an expected number isn't actually a number
Then it throws an Error.

# is_set
Scenario: The variable has a value set.

Given a Validator
When a variable is checked
Then nothing happens.

Scenario: The variable is empty.

Given a Validator
When an empty variable is checked
Then it throws an Error.

# is_integer
Scenario: The variable has an integer

Given a Validator
When a variable with an integer is checked
Then nothing happens.

Scenario: The variable doesn't have an integer

Given a Validator
When a variable has something other than an integer
Then it throws an Error.

# is_id
Scenario: A valid ID is given.

Given a Validator
When a valid element ID is given
Then nothing happens.

Scenario: An invalid ID is given.

Given a Validator
When an invalid element ID is given
Then it throws an Error.
#+end_src

#+begin_src js :tangle ../tests/cucumber-tests/test-generative-art-spiral/steps/validator_steps.js :exports none
import { expect } from "chai";
import { faker } from "@faker-js/faker";
import { Given, When, Then } from "@cucumber/cucumber";
import { JSDOM } from "jsdom";

// Software Under Test

import { Validator } from "../../../../files/posts/generative-art-spiral/validator.js"

// a fake document
const VALID_ID = "validator-id";

const document = new JSDOM(`
<html>
<head></head>
<body>
 <div id=${VALID_ID}></div>
</body>
</html>
`).window.document;


Given("a Validator", function() {
  this.validate = new Validator(document);
});

// Scenario: The expected number is a number.
When("a number is checked", function() {
  this.validate.is_a_number("good-number", faker.number.float());
    this.validate.is_a_number("good-number", 0);
});

Then("nothing happens.", function() {
  
});

// Scenario: The expected number isn't a number.
When("an expected number isn't actually a number", function() {
  this.bad_call = function() {
      this.validate.is_a_number("bad-number", "ape");
  };
});

Then("it throws an Error.", function() {
  expect(this.bad_call.bind(this)).to.throw(Error);
});

//Scenario: The variable has a value set.
When("a variable is checked", function() {
  const variable = "ape";
  this.validate.is_set("set-variable", variable);
  this.validate.is_set("set-variable", 0);
  this.validate.is_set("set-variable", false);
});

// Scenario: The variable is empty.
When("an empty variable is checked", function() {
  this.bad_call = function() {
    this.validate.is_set(null);
  };
});

// Scenario: Scenario: The variable has an integer
When("a variable with an integer is checked", function() {
  this.validate.is_an_integer("is-integer", faker.number.int());
});

// Scenario: The variable doesn't have an integer
When("a variable has something other than an integer", function() {
  this.bad_call = function() {
    this.validate.is_an_integer("not-integen", "5");
  };
});

// Scenario: A valid ID is given.
When("a valid element ID is given", function() {
  this.validate.is_an_element_id("good-id", VALID_ID);
});

// Scenario: An invalid ID is given.
When("an invalid element ID is given", function() {
  this.bad_call = function() {
    this.validate.is_an_element_id("bad-id", VALID_ID + "invalid");
  };
});
#+end_src

#+begin_src js :tangle ../files/posts/generative-art-spiral/validator.js :exports none
<<validator-declaration>>

  <<validate-is-number>>

  <<validate-is-set>>

  <<validate-is-integer>>

  <<validate-is-id>>
 }; // Validator

export { Validator }
#+end_src
** Class Declaration

#+begin_src js :noweb-ref validator-declaration
class Validator {
  emptiness = [null, undefined, NaN];

  constructor(document) {
    this.document = document;
  }
#+end_src

** Is A Number

#+begin_src js :noweb-ref validate-is-number
is_a_number(identifier, actual) {
  if ((!actual && actual !== 0) || isNaN(actual)) {
    throw Error(`"${identifier}" must be a number not "${actual}"`);
  };
}; // is_a_number
#+end_src

** Is An Integer

#+begin_src js :noweb-ref validate-is-integer
is_an_integer(identifier, actual) {
  if (!Number.isInteger(actual)) {
    throw Error(`"${identifier}" must be an integer, not ${actual}`);
  };
}; // is_an_integer
#+end_src
** Is Set

#+begin_src js :noweb-ref validate-is-set
is_set(identifier, actual) {
  if (this.emptiness.includes(actual)) {
    throw Error(`"${identifier} must be set, not "${actual}"`)
  };
}; //is_set
#+end_src
** Is An Element's ID

#+begin_src js :noweb-ref validate-is-id
is_an_element_id(identifier, actual) {
  if (this.document.getElementById(actual) === null) {
    throw Error(`"${identifier}" isn't a valid ID - "${actual_id}"`);
  };
}; // is_an_id
#+end_src

* The Sliders Settings

#+begin_src gherkin :tangle ../tests/cucumber-tests/test-generative-art-spiral/features/slider_settings.feature :exports none
Feature: Slider Settings

# Min
Scenario: The min isn't set.

Given a Slider Settings
When it has no min
And check_rep is called later
Then it should raise an exception.

Scenario: The min isn't numeric.

Given a Slider Settings
When it has a non-numeric min
And check_rep is called later
Then it should raise an exception.

Scenario: The min is valid
Given a Slider Settings
When it has a valid min
And check_rep is called
Then nothing should happen.

# Max
Scenario: The max isn't set.

Given a Slider Settings
When it has no max
And check_rep is called later
Then it should raise an exception.

Scenario: The max isn't numeric.

Given a Slider Settings
When it has a non-numeric max
And check_rep is called later
Then it should raise an exception.

Scenario: The max is valid.
Given a Slider Settings
When it has a valid max
And check_rep is called
Then nothing should happen.

# Default Value
Scenario: The default value isn't set.

Given a Slider Settings
When it has no default value
And check_rep is called later
Then it should raise an exception.

Scenario: The default value isn't numeric.

Given a Slider Settings
When it has a non-numeric default value
And check_rep is called later
Then it should raise an exception.

Scenario: The default value is valid.
Given a Slider Settings
When it has a valid default value
And check_rep is called
Then nothing should happen.

# Step Size
Scenario: The step size isn't set.

Given a Slider Settings
When it has no step size
And check_rep is called later
Then it should raise an exception.

Scenario: The step size isn't numeric.

Given a Slider Settings
When it has a non-numeric step size
And check_rep is called later
Then it should raise an exception.

Scenario: The step size is valid.
Given a Slider Settings
When it has a valid step size
And check_rep is called
Then nothing should happen.

Scenario: The label isn't set.

Given a Slider Settings
When it has no label
And check_rep is called later
Then it should raise an exception.

# Precision
Scenario: The precision isn't set.

Given a Slider Settings
When it has no precision
And check_rep is called later
Then it should raise an exception.

Scenario: The precision isn't an integer.

Given a Slider Settings
When it has a non-integer precision
And check_rep is called later
Then it should raise an exception.

Scenario: The precision is valid.
Given a Slider Settings
When it has a valid precision
And check_rep is called
Then nothing should happen.

# slider div

Scenario: The slider div is invalid

Given a Slider Settings
When it has an invalid slider div
And check_rep is called later
Then it should raise an exception.

# caption div

Given a Slider Settings
When it has an invalid caption div
And check_rep is called later
Then it should raise an exception.
#+end_src

#+begin_src js :tangle ../tests/cucumber-tests/test-generative-art-spiral/steps/slider_settings_steps.js :exports none
import { JSDOM } from "jsdom";
import { expect } from "chai";
import { Given, When, Then } from "@cucumber/cucumber";
import { fake, replace } from "sinon";
import { SliderSettings } from "../../../../files/posts/generative-art-spiral/slider.js";
import { Validator } from "../../../../files/posts/generative-art-spiral/validator.js";

/* The fake document */
const SLIDER_ID = "slider-div";
const CAPTION_ID = "caption-div";
const document = new JSDOM(`<html>
<head></head>
<body>
<div id='${SLIDER_ID}'></div>
<div id='${CAPTION_ID}'></div>
</body></html>`).window.document;

const VALIDATOR = new Validator(document);

/** min **/
/* not set */
Given("a Slider Settings", function() {
  this.settings = new SliderSettings(0, 5, 3, 1, "some label", 3,
                                     "slider-div", "caption-div",
                                     VALIDATOR, document);
});

When("it has no min", function() {
  this.settings.min = null;
});

When("check_rep is called later", function() {

});

Then("it should raise an exception.", function() {
  expect(this.settings.check_rep.bind(this.settings)).to.throw(Error);
});

/** non-numeric **/
When("it has a non-numeric min", function() {
  this.settings.min = "bob";
});

/** Valid **/
When("it has a valid min", function() {
});

When("check_rep is called", function() {
  this.settings.check_rep();
});

Then("nothing should happen.", function() {
  
});

/** Max **/

// no max
When("it has no max", function() {
  this.settings.max = null;
});

// The max isn't numeric.

When("it has a non-numeric max", function() {
  this.settings.max = "max";
});

// The max is valid.
When("it has a valid max", function() {
  this.settings.max = 20;
});

/** Default Value **/
// Scenario: The default value isn't set.
When("it has no default value", function() {
  this.settings.default_value = undefined;
});

// Scenario: The default value isn't numeric.
When("it has a non-numeric default value", function() {
  this.settings.default_value = "Bub";
});

// The default value is valid.
When("it has a valid default value", function() {
  this.settings.default_value = 5;
});

/** Step Size **/
// Scenario: The step size isn't set.
When("it has no step size", function() {
  this.settings.step_size = undefined;
});

// The step size is valid.
When("it has a valid step size", function() {
  this.settings.step_size = 0;
});

// Scenario: The step size isn't numeric.
When("it has a non-numeric step size", function() {
  this.settings.step_size = "Bub";
});

/** Label **/
// Scenario: The label isn't set.
When("it has no label", function() {
  this.settings.label = undefined;
});

/** Precision **/
// Scenario: The precision isn't set.
When("it has no precision", function() {
  this.settings.precision = undefined;
});

// Scenario: The precision isn't an integer.
When("it has a non-integer precision", function() {
  this.settings.precision = 5.5;
});

// Scenario: The precision is valid.
When("it has a valid precision", function() {

});

// slider div
// Scenario: The slider div is invalid
When("it has an invalid slider div", function() {
  this.settings.slider_div = "some id";
});

Then("the invalid id should raise an exception.", function() {
  expect(this.settings.check_rep.bind(this.settings)).to.throw(Error);
});

// caption div
// Scenario: The caption div is invalid
When("it has an invalid caption div", function() {
  this.settings.caption_div = "some id";
});
#+end_src
** The Slider Settings
#+begin_src js :noweb-ref slider-settings-class
class SliderSettings {
  constructor(min, max, default_value, step_size,
              label, precision,
              slider_div, caption_div,
              validator, document) {
    this.min = min;
    this.max = max;
    this.default_value = default_value;
    this.step_size = step_size;
    this.label = label;
    this.precision = precision;
    this.slider_div = slider_div;
    this.caption_div = caption_div;
    this.confirm = validator;
    this.document = document;
  }; // constructor

  check_rep(){
    this.confirm.is_a_number("min", this.min);
    this.confirm.is_a_number("max", this.max);
    this.confirm.is_a_number("default_value", this.default_value);
    this.confirm.is_a_number("step_size", this.step_size);
    this.confirm.is_set("label", this.label);
    this.confirm.is_an_integer("precision", this.precision);
    this.confirm.is_an_element_id("slider_div", this.slider_div);
    this.confirm.is_an_element_id("caption_div", this.caption_div);
  }; // check_rep
}; // SliderSettings
#+end_src
** Angle Slider

The values used to create the angle-increment slider.

#+begin_src js :noweb-ref angle-slider-values
const ANGLE_SLIDER = {
  min: 0,
  max: 40,
  default_value: 5,
  step_size: 0,
  label: "Angle Increment",
  precision: 2,
  slider_div: SPIRAL_ANGLE_SLIDER,
  caption_div: SPIRAL_ANGLE_TEXT
}
#+end_src

** Radius Slider

The values used to create the radius increment slider.

#+begin_src js :noweb-ref radius-slider-values
const RADIUS_SLIDER = {
  min: 0,
  max: 20,
  default_value: 1,
  step_size: 0,
  label: "Radius Increment",
  precision: 2,
  slider_div: SPIRAL_RADIUS_SLIDER,
  caption_div: SPIRAL_RADIUS_TEXT
}
#+end_src

** Circle Slider

The values used to create the circle diameter slider.

#+begin_src js :noweb-ref circle-slider-values
const CIRCLE_SLIDER = {
  min: 1,
  max: 100,
  default_value: 1,
  step_size: 0,
  label: "Point Diameter",
  precision: 2,
  slider_div: SPIRAL_CIRCLE_SLIDER,
  caption_div: SPIRAL_CIRCLE_TEXT
}
#+end_src

* Slidini
** The Class Declaration
#+begin_src js :noweb-ref slidini
class Slidini {
  _slider = null;
  _caption = null;
#+end_src

** The Constructor

#+begin_src js :noweb-ref slidini-constructor
constructor(settings, p5) {
  this.settings = settings;
  this.p5 = p5;
} // constructor
#+end_src

** The Slider

#+begin_src js :noweb-ref slidini-get-slider
get slider() {
  if (this._slider === null) {
    // create the slider
    this._slider = this.p5.createSlider(
      this.settings.min,
      this.settings.max,
      this.settings.default_value,
      this.settings.step_size,
    );

    // attach it to the div tag
    this._slider.parent(this.settings.slider_div);

    // set the callback to change label on update
    this._slider.input(() => this.update_caption());

    // add the label to the slider
    this.update_caption();
  }
  return this._slider;
}
#+end_src

** The Caption

#+begin_src js :noweb-ref slidini-get-caption
get caption() {
  if (this._caption === null) {
    this._caption = this.p5.select(this.settings.caption_div);
  }
  return this._caption;
}
#+end_src

** The Caption Updater

#+begin_src js :noweb-ref slidini-update-caption
update_caption() {
  this.caption.html(
    `${this.settings.label}: ` +
      `${this.slider.value().toFixed(this.settings.precision)}`);
} // update_caption
#+end_src

* The Spiralizer

** Class Declaration

#+begin_src js :noweb-ref the-spiralizer
class Spiralizer {
  // geometry
  degrees_in_a_circle = 360;
  to_radians = (2 * Math.PI)/ this.degrees_in_a_circle;

  // the starting values for the circles
  radius = 1;
  angle = 0;

  // the center of our sketch (and the circles)
  center_x;
  center_y;
#+end_src

** The Constructor

#+begin_src js :noweb-ref spiralizer-constructor
constructor(p5, center_x, center_y, maximum_radius,
            angle_slider, radius_slider, circle_slider){
  this.p5 = p5;
  this.center_x = center_x;
  this.center_y = center_y;
  this.maximum_radius = maximum_radius;

  // the amount to move the points on the circle as they're drawn
  this.angle_increment = angle_slider;
  this.radius_increment = radius_slider;

  // the size of the circle to draw  the circles
  this.point_diameter = circle_slider;
} // constructor
#+end_src

** The Draw Method

#+begin_src js :noweb-ref spiralizer-draw
draw() {
  let radians, x, y;
  
  radians = this.angle * this.to_radians;
  x = this.center_x + this.radius * Math.cos(radians);
  y = this.center_y + this.radius * Math.sin(radians);
  this.p5.circle(x, y, this.point_diameter.value());


  this.radius += this.radius_increment.value();
  this.angle += this.angle_increment.value();

  if (this.radius >= this.maximum_radius) {
    this.radius = this.radius_increment.value();
  }
} // end draw
#+end_src

** Reset

#+begin_src js :noweb-ref spiralizer-reset
reset() {
  this.radius = this.radius_increment.value();
  this.angle = 0;
} // end reset
#+end_src
* The Spiral Sketch

This is going to be the sketch that we pass to [[*The P5 Instance][the P5 constructor]] to create the animation.

** Function Declaration

#+begin_src js :noweb-ref spiral-sketch
function spiral_sketch(p5) {
  // the size of the canvas and the color of the circles
  const WIDTH = 500;
  const HEIGHT = WIDTH;
  const POINT_COLOR = "RoyalBlue";
  
  let spiralizer;
  let angle_slider;
  let radius_slider;
  let circle_slider;
#+end_src

** Setup
*** Setup The Canvas and Drawing Settings
#+begin_src js :noweb-ref spiral-sketch-setup
p5.setup = function(){
  p5.createCanvas(WIDTH, HEIGHT);
  p5.background("white");
  p5.stroke(POINT_COLOR);
  p5.fill(POINT_COLOR);
#+end_src

*** Create The Sliders
#+begin_src js :noweb-ref spiral-sketch-setup-sliders
angle_slider = new Slidini(ANGLE_SLIDER, p5);  
radius_slider = new Slidini(RADIUS_SLIDER, p5);
circle_slider = new Slidini(CIRCLE_SLIDER, p5);
#+end_src

*** Create the Spiralizer and End the Setup
#+begin_src js :noweb-ref spiral-sketch-setup-spiralizer
spiralizer = new Spiralizer(p5, WIDTH/2, HEIGHT/2, WIDTH/2,
                            angle_slider.slider,
                            radius_slider.slider,
                            circle_slider.slider);

} // end setup
#+end_src

** Draw

#+begin_src js :noweb-ref spiral-sketch-draw
p5.draw = function() {
  spiralizer.draw();
  p5.background(255, 5);
}// end draw
#+end_src

** Double-Clicked

#+begin_src js :noweb-ref spiral-sketch-double-clicked
p5.doubleClicked = function() {
  spiralizer.reset();
  p5.background("white");
} // end doubleClicked
#+end_src

** The P5 Instance

To create the animation I'll create a p5 object by passing in [[*The Spiral Sketch][the function from the previous section]] and [[*The Sketch Div][the div ID]] to identify where in the page the sketch should go.
#+begin_src js :noweb-ref p5-instance
new p5(spiral_sketch, SPIRAL_DIV);
#+end_src
* References

- {{% doc %}}bibliography-generative-art{{% /doc %}}

- id - HTML: HyperText Markup Language | MDN [Internet]. 2023 [cited 2023 Sep 14]. Available from: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id

- p5.js reference | createSlider() [Internet]. [cited 2023 Apr 25]. Available from: https://p5js.org/reference/#/p5/createSlider

- p5.js reference | p5.Element [Internet]. [cited 2023 Sep 14]. Available from: https://p5js.org/reference/#/p5.Element

- p5.js reference | html() [Internet]. [cited 2023 Sep 14]. Available from: https://p5js.org/reference/#/p5.Element/html

- p5.js reference | parent() [Internet]. [cited 2023 Sep 14]. Available from: https://p5js.org/reference/#/p5.Element/parent

- p5.js reference | select() [Internet]. [cited 2023 Sep 14]. Available from: https://p5js.org/reference/#/p5/select
