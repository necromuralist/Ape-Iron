#+BEGIN_COMMENT
.. title: Generative Art: Concentric Circles
.. slug: generative-art-concentric-circles
.. date: 2023-08-28 15:19:49 UTC-07:00
.. tags: p5.js,generative art
.. category: Generative Art
.. link: 
.. description: Drawing concentric circles in p5 with trigonometry.
.. type: text
.. status: 
.. updated: 
.. template: p5.tmpl
#+END_COMMENT

{{% p5div source="concentric-circles.js" divid="03d2e681-concentric-circles" %}}

#+begin_src js :tangle ../files/posts/generative-art-concentric-circles/concentric-circles.js :exports none
<<sketch-div>>

<<concentric-circles-class>>

  <<concentric-circles-center-x>>

  <<concentric-circles-center-y>>

  <<concentric-circles-draw>>

  <<concentric-circles-step>>

} // Concentric Circles class

<<concentric-circles-function>>
  
  <<concentric-circles-p5-setup>>

  <<concentric-circles-p5-draw>>

} // end concentric_circles sketch function

<<concentric-circles-p5-object>>
#+end_src

* The Sketch Div

#+begin_src js :noweb-ref sketch-div
const CONCENTRIC_CIRCLES_DIV = "03d2e681-concentric-circles";
#+end_src


* The Class

#+begin_src js :noweb-ref concentric-circles-class
class ConcentricCircles {
  // geometry
  degrees_in_a_circle = 360;
  to_radians = (2 * Math.PI)/ this.degrees_in_a_circle;

  // the starting values for the circles
  radius = 5;
  _step = 10;

  // the center of our sketch (and the circles)
  _center_x;
  _center_y;

  // the size of the circle to draw  the circles
  point_diameter = 1;
  
  constructor(p5, width, height){
    this.p5 = p5;
    this.width = width;
    this.height = height;
  } // constructor
#+end_src
** The Center X

#+begin_src js :noweb-ref concentric-circles-center-x
get center_x() {
  if (this._center_x === undefined) {
    this._center_x = this.width/2;
  }
  return this._center_x;
}
#+end_src
** The Center Y

#+begin_src js :noweb-ref concentric-circles-center-y
get center_y() {
  if (this._center_y === undefined) {
    this._center_y = this.height/2;
  }
  return this._center_y;
}
#+end_src
** The Step
#+begin_src js :noweb-ref concentric-circles-step
get step() {
  if (this.radius > (this.center_x - this._step) || this.radius <= 0) {
      this._step *= -1;
    }
  return this._step
}
#+end_src
** The Draw

#+begin_src js :noweb-ref concentric-circles-draw
draw() {
  let radians, x, y;

  for (let angle = 0; angle < this.degrees_in_a_circle; angle += 1){
      radians = angle * this.to_radians;
      x = this.center_x + this.radius * Math.cos(radians);
      y = this.center_y + this.radius * Math.sin(radians);
      this.p5.circle(x, y, this.point_diameter);
  }

  this.radius += this.step;
}
#+end_src

* The Sketch Function

** Concentric Circles

#+begin_src js :noweb-ref concentric-circles-function
function concentric_circles(p5){
  // the size of the canvas and the color of the circles
  const WIDTH = 500;
  const HEIGHT = WIDTH;
  const POINT_COLOR = "RoyalBlue";

  const circles = new ConcentricCircles(p5, WIDTH, HEIGHT);
#+end_src

** Set Up

#+begin_src js :noweb-ref concentric-circles-p5-setup
p5.setup = function(){
  p5.createCanvas(WIDTH, HEIGHT);
  p5.background("white");
  p5.stroke(POINT_COLOR);
  p5.fill(POINT_COLOR);
  p5.frameRate(10);
} // end setup
#+end_src

** Draw

#+begin_src js :noweb-ref concentric-circles-p5-draw
p5.draw = function() {
  circles.draw();
  p5.background(255, 75);
}// end draw
#+end_src

* Passing The Sketch to p5.js

#+begin_src js :noweb-ref concentric-circles-p5-object
new p5(concentric_circles, CONCENTRIC_CIRCLES_DIV);
#+end_src
